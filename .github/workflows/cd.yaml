name: CD Pipeline (Terraform + AWS)

on:
  push:
    branches: [ devel, stage, prod ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. Build the React app
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'
      - run: npm ci
      - run: npm run build

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
      
      #debug step to see what variables.tf the runner sees
      - name: Debug â€” show variables.tf the runner sees
        run: |
          pwd
          ls -la
          echo "--- terraform/variables.tf ---"
          sed -n '1,80p' terraform/variables.tf
          echo "--- module variables.tf ---"
          sed -n '1,80p' terraform/modules/static-site/variables.tf

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # 4. Init & Apply Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        env:
          ENV: ${{ github.ref_name }}        # devel | stage | prod
          UNIQUE: ${{ secrets.UNIQUE_PREFIX }}
        run: |
          terraform workspace select "$ENV" || terraform workspace new "$ENV"
          terraform plan  -var-file="envs/${ENV}.tfvars" -var "unique_prefix=$UNIQUE" -out=tfplan
          terraform apply -auto-approve tfplan

      # 5. Upload the build folder to S3
      - name: Get Terraform outputs
        id: tfout
        working-directory: terraform
        run: |
          echo "BUCKET=$(terraform output -raw bucket_name)"         >> $GITHUB_OUTPUT
          echo "DIST_ID=$(terraform output -raw distribution_id)"    >> $GITHUB_OUTPUT
          echo "DOMAIN=$(terraform output -raw distribution_domain)" >> $GITHUB_OUTPUT

      - name: Upload web build to S3
        run: aws s3 sync ./build "s3://${{ steps.tfout.outputs.BUCKET }}" --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id "${{ steps.tfout.outputs.DIST_ID }}" --paths "/*"

      - name: Show deployed URL
        run: echo "App is live at https://${{ steps.tfout.outputs.DOMAIN }}"